{
  "name": "n3",
  "version": "0.4.3",
  "description": "Lightning fast, asynchronous, streaming Turtle / N3 / RDF library.",
  "author": {
    "name": "Ruben Verborgh",
    "email": "ruben.verborgh@gmail.com"
  },
  "keywords": [
    "turtle",
    "rdf",
    "n3",
    "streaming",
    "asynchronous"
  ],
  "license": "MIT",
  "main": "./N3.js",
  "engines": {
    "node": ">=0.10.0"
  },
  "devDependencies": {
    "async": "~0.9.0",
    "browserify": "~3.x",
    "chai": "~1.4.2",
    "chai-things": "~0.1.1",
    "colors": "~0.6.0",
    "docco": "~0.6.2",
    "eslint": "~0.19.0",
    "istanbul": "~0.3.0",
    "mocha": "~1.15.0",
    "pre-commit": "~0.0.9",
    "request": "~2.22.0",
    "uglify-js": "~2.4.3"
  },
  "scripts": {
    "test": "mocha",
    "lint": "eslint lib perf test spec",
    "browser": "node browser/build-browser-versions",
    "coverage": "istanbul cover node_modules/.bin/_mocha -- -R spec --timeout 100",
    "spec": "node spec/turtle-spec && node spec/trig-spec && node spec/ntriples-spec && node spec/nquads-spec",
    "spec-clean": "rm -r spec/turtle spec/trig",
    "docs": "docco lib/*.js"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/RubenVerborgh/N3.js.git"
  },
  "bugs": {
    "url": "https://github.com/RubenVerborgh/N3.js/issues"
  },
  "testling": {
    "files": "test/*.js",
    "harness": "mocha",
    "browsers": [
      "ie/9..latest",
      "firefox/24..latest",
      "chrome/29..latest",
      "safari/6..latest",
      "iphone/6..latest",
      "ipad/6..latest"
    ]
  },
  "pre-commit": [
    "lint",
    "test"
  ],
  "readme": "# Lightning fast, asynchronous, streaming RDF for JavaScript\n\nThe N3.js library lets you handle [RDF](http://www.w3.org/TR/rdf-primer/) in JavaScript easily, in [Node.js](http://nodejs.org/) and the browser.\nIt offers:\n\n- [**Parsing**](#parsing) triples/quads from\n  [Turtle](http://www.w3.org/TR/turtle/),\n  [TriG](http://www.w3.org/TR/trig/),\n  [N-Triples](http://www.w3.org/TR/ntriples/)\n  and [N-Quads](http://www.w3.org/TR/nquads/).\n- [**Writing**](#Writing) triples/quads to\n  [Turtle](http://www.w3.org/TR/turtle/),\n  [TriG](http://www.w3.org/TR/trig/),\n  [N-Triples](http://www.w3.org/TR/ntriples/)\n  and [N-Quads](http://www.w3.org/TR/nquads/).\n- **Storage** of triples/quads in memory\n\nParsing and writing is:\n- **asynchronous** – triples arrive as soon as possible\n- **streaming** – streams are parsed as data comes in, so you can parse files larger than memory\n- **fast** – by far the [fastest parser in JavaScript](https://github.com/RubenVerborgh/N3.js/tree/master/perf)\n\n## Installation\nFor Node.js, N3.js comes as an [npm package](https://npmjs.org/package/n3).\n\n``` bash\n$ npm install n3\n```\n\n``` js\nvar N3 = require('n3');\n```\n\nN3.js seamlessly works in browsers. Generate a browser version as follows:\n\n``` bash\n$ cd N3.js\n$ npm install\n$ npm run browser\n```\n\n``` html\n<script src=\"n3-browser.min.js\"></script>\n```\n\nIn addition, N3.js is fully compatible with [browserify](http://browserify.org/),\nso you can write code for Node.js and deploy it to browsers.\n\n## Triple representation\nFor maximum performance and ease of use,\ntriples are simple objects with string properties.\n\n**URLs, URIs and IRIs are simple strings.** For example, parsing this RDF document:\n``` Turtle\n@prefix c: <http://example.org/cartoons#>.\nc:Tom a c:Cat.\n```\nresults in this JavaScript object:\n``` js\n{\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n  object:    'http://example.org/cartoons#Cat'\n}\n```\n\n**Literals are represented as double quoted strings.** For example, parsing this RDF document:\n``` Turtle\nc:Tom c:name \"Tom\".\n```\nresults in this JavaScript object:\n``` js\n{\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://example.org/cartoons#name',\n  object:    '\"Tom\"'\n}\n```\n\nThis allows you to create and compare literals fast and easily:\n``` js\ntriple.object === 'http://example.org/cartoons#Cat'\ntriple.object === '\"Tom\"'\n```\n\nFor literals with a language or type, add a marker (`@` or `^^`) and the corresponding value as-is:\n``` js\n'\"Tom\"@en-gb' // lowercase language\n'\"1\"^^http://www.w3.org/2001/XMLSchema#integer' // no angular brackets <>\n```\n\nAn optional fourth element signals the graph to which a triple belongs:\n``` js\n{\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://example.org/cartoons#name',\n  object:    '\"Tom\"',\n  graph:     'http://example.org/mycartoon'\n}\n```\n\nThe N3.js [Utility](#utility) (`N3.Util`) can help you with these representations.\n\n## Parsing\n\n### From an RDF document to triples\n\n`N3.Parser` transforms Turtle, TriG, N-Triples or N-Quads document into triples through a callback:\n``` js\nvar parser = N3.Parser();\nparser.parse('@prefix c: <http://example.org/cartoons#>.\\n' +\n             'c:Tom a c:Cat.\\n' +\n             'c:Jerry a c:Mouse;\\n' +\n             '        c:smarterThan c:Tom.',\n             function (error, triple, prefixes) {\n               if (triple)\n                 console.log(triple.subject, triple.predicate, triple.object, '.');\n               else\n                 console.log(\"# That's all, folks!\", prefixes)\n             });\n```\nThe callback's first argument is an error value, the second is a triple.\nIf there are no more triples,\nthe callback is invoked one last time with `null` for `triple`\nand a hash of prefixes as third argument.\n<br>\nPass a second callback to `parse` to retrieve prefixes as they are read.\n\nBy default, `N3.Parser` parses a permissive superset of Turtle, TriG, N-Triples and N-Quads.\n<br>\nFor strict compatibility with any of those languages, pass a `format` argument upon creation:\n\n``` js\nvar parser1 = N3.Parser({ format: 'N-Triples' });\nvar parser2 = N3.Parser({ format: 'application/trig' });\n```\n\n### From RDF chunks to triples\n\n`N3.Parser` can also parse triples from RDF documents arriving in chunks,\nfor instance, when being downloaded or read from disk.\nUse `addChunk` to add a piece of data, and `end` to signal the end.\n\n``` js\nvar parser = N3.Parser(), triples = [];\nparser.parse(function (error, triple, prefixes) { triple && triples.push(triple); });\n\nparser.addChunk('@prefix c: <http://example.org/cartoons#>.\\n');\nparser.addChunk('c:Tom a ');\nparser.addChunk('c:Cat. c:Jerry a');\nconsole.log(triples); // First triple\n\nparser.addChunk(' c:Mouse.');\nparser.end();\nconsole.log(triples); // Both triples\n```\n\n### From an RDF stream to triples\n\n`N3.Parser` can parse [Node.js streams](http://nodejs.org/api/stream.html) as they grow,\nreturning triples as soon as they're ready.\n<br>\nThis behavior sets N3.js apart from most other libraries.\n\n``` js\nvar parser = N3.Parser(),\n    rdfStream = fs.createReadStream('cartoons.ttl');\nparser.parse(rdfStream, console.log);\n```\n\nIn addition, `N3.StreamParser` offers a [Node.js stream](http://nodejs.org/api/stream.html) implementation,\nso you can transform RDF streams and pipe them to anywhere.\nThis solution is ideal if your consumer is slower,\nsince source data is only read when the consumer is ready.\n\n``` js\nvar streamParser = N3.StreamParser(),\n    rdfStream = fs.createReadStream('cartoons.ttl');\nrdfStream.pipe(streamParser);\nstreamParser.pipe(new SlowConsumer());\n\nfunction SlowConsumer() {\n  var writer = new require('stream').Writable({ objectMode: true });\n  writer._write = function (triple, encoding, done) {\n    console.log(triple);\n    setTimeout(done, 1000);\n  };\n  return writer;\n}\n```\n\nA dedicated `prefix` event signals every prefix with `prefix` and `iri` arguments.\n\n## Writing\n\n### From triples to a string\n\n`N3.Writer` serializes triples as an RDF document.\nWrite triples through `addTriple`.\n\n``` js\nvar writer = N3.Writer({ prefixes: { 'c': 'http://example.org/cartoons#' } });\nwriter.addTriple('http://example.org/cartoons#Tom',\n                 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n                 'http://example.org/cartoons#Cat');\nwriter.addTriple({\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://example.org/cartoons#name',\n  object:    '\"Tom\"'\n});\nwriter.end(function (error, result) { console.log(result); });\n```\n\nBy default, `N3.Writer` writes Turtle (or TriG for triples with a `graph` property).\n<br>\nTo write N-Triples (or N-Quads) instead, pass a `format` argument upon creation:\n\n``` js\nvar writer1 = N3.Writer({ format: 'N-Triples' });\nvar writer2 = N3.Writer({ format: 'application/trig' });\n```\n\n### From triples to an RDF stream\n\n`N3.Writer` can also write triples to a Node.js stream.\n\n``` js\nvar writer = N3.Writer(process.stdout, { prefixes: { 'c': 'http://example.org/cartoons#' } });\nwriter.addTriple('http://example.org/cartoons#Tom',\n                 'http://www.w3.org/1999/02/22-rdf-syntax-ns#type',\n                 'http://example.org/cartoons#Cat');\nwriter.addTriple({\n  subject:   'http://example.org/cartoons#Tom',\n  predicate: 'http://example.org/cartoons#name',\n  object:    '\"Tom\"'\n});\nwriter.end();\n```\n\n### From a triple stream to an RDF stream\n\n`N3.StreamWriter` is a writer implementation as a Node.js stream.\n\n``` js\nvar streamParser = new N3.StreamParser(),\n    inputStream = fs.createReadStream('cartoons.ttl'),\n    streamWriter = new N3.StreamWriter({ prefixes: { 'c': 'http://example.org/cartoons#' } });\ninputStream.pipe(streamParser);\nstreamParser.pipe(streamWriter);\nstreamWriter.pipe(process.stdout);\n```\n\n## Storing\n\n`N3.Store` allows you to store triples in memory and find them fast.\n\nIn this example, we create a new store and add the triples `:Pluto a :Dog.` and `:Mickey a :Mouse`.\n<br>\nThen, we find a triple with `:Mickey` as subject.\n\n``` js\nvar store = N3.Store();\nstore.addTriple('http://ex.org/Pluto',  'http://ex.org/type', 'http://ex.org/Dog');\nstore.addTriple('http://ex.org/Mickey', 'http://ex.org/type', 'http://ex.org/Mouse');\n\nvar mickey = store.find('http://ex.org/Mickey', null, null)[0];\nconsole.log(mickey.subject, mickey.predicate, mickey.object, '.');\n```\n\n## Utility\n`N3.Util` offers helpers for IRI and literal representations.\n<br>\nAs IRIs are most common, they are represented as simple strings:\n``` js\nvar N3Util = N3.Util;\nN3Util.isIRI('http://example.org/cartoons#Mickey'); // true\n```\n**Literals** are represented as double quoted strings:\n``` js\nN3Util.isLiteral('\"Mickey Mouse\"'); // true\nN3Util.getLiteralValue('\"Mickey Mouse\"'); // 'Mickey Mouse'\nN3Util.isLiteral('\"Mickey Mouse\"@en'); // true\nN3Util.getLiteralLanguage('\"Mickey Mouse\"@en'); // 'en'\nN3Util.isLiteral('\"3\"^^http://www.w3.org/2001/XMLSchema#integer'); // true\nN3Util.getLiteralType('\"3\"^^http://www.w3.org/2001/XMLSchema#integer'); // 'http://www.w3.org/2001/XMLSchema#integer'\nN3Util.isLiteral('\"http://example.org/\"'); // true\nN3Util.getLiteralValue('\"http://example.org/\"'); // 'http://example.org/'\n```\nNote the difference between `'http://example.org/'` (IRI) and `'\"http://example.org/\"'` (literal).\n<br>\nAlso note that the double quoted literals are _not_ raw Turtle/TriG syntax:\n``` js\nN3Util.isLiteral('\"This word is \"quoted\"!\"'); // true\nN3Util.isLiteral('\"3\"^^http://www.w3.org/2001/XMLSchema#integer'); // true\n```\nThe above string represents the string _This word is \"quoted\"!_,\neven though the correct Turtle/TriG syntax for that is `\"This word is \\\"quoted\\\"!\"`\nN3.js thus always parses literals, but adds quotes to differentiate from IRIs:\n``` js\nnew N3.Parser().parse('<a> <b> \"This word is \\\\\"quoted\\\\\"!\".', console.log);\n// { subject: 'a', predicate: 'b', object: '\"This word is \"quoted\"!\"' }\n```\n\nLiterals can be created with `createLiteral`:\n``` js\nN3Util.createLiteral('My text', 'en-gb');\nN3Util.createLiteral('123', 'http://www.w3.org/2001/XMLSchema#integer');\nN3Util.createLiteral(123);\nN3Util.createLiteral(false);\n```\n\n**Blank nodes** start with `_:`, and can be tested for as follows:\n``` js\nN3Util.isBlank('_:b1'); // true\nN3Util.isIRI('_:b1'); // false\nN3Util.isLiteral('_:b1'); // false\n```\n\n**Prefixed names** can be tested and expanded:\n``` js\nvar prefixes = { 'rdfs': 'http://www.w3.org/2000/01/rdf-schema#' };\nN3Util.isPrefixedName('rdfs:label'); // true;\nN3Util.expandPrefixedName('rdfs:label', prefixes); // http://www.w3.org/2000/01/rdf-schema#label\n```\n\n### Loading the utility globally\nFor convenience, `N3Util` can be loaded globally:\n``` js\nrequire('n3').Util(global);\nisIRI('http://example.org/cartoons#Mickey'); // true\nisLiteral('\"Mickey Mouse\"'); // true\n```\n\nIf desired, its methods can even be added directly on all strings:\n``` js\nrequire('n3').Util(String, true);\n'http://example.org/cartoons#Mickey'.isIRI(); // true\n'\"Mickey Mouse\"'.isLiteral(); // true\n```\n\n## Compatibility\n### Specifications\nThe N3.js parser and writer is fully compatible with the following W3C specifications:\n- [RDF 1.1 Turtle](http://www.w3.org/TR/turtle/)\n  – [EARL report](https://raw.githubusercontent.com/RubenVerborgh/N3.js/earl/n3js-earl-report-turtle.ttl)\n- [RDF 1.1 TriG](http://www.w3.org/TR/trig/)\n  – [EARL report](https://raw.githubusercontent.com/RubenVerborgh/N3.js/earl/n3js-earl-report-trig.ttl)\n- [RDF 1.1 N-Triples](http://www.w3.org/TR/n-triples/)\n  – [EARL report](https://raw.githubusercontent.com/RubenVerborgh/N3.js/earl/n3js-earl-report-ntriples.ttl)\n- [RDF 1.1 N-Quads](http://www.w3.org/TR/n-quads/)\n  – [EARL report](https://raw.githubusercontent.com/RubenVerborgh/N3.js/earl/n3js-earl-report-nquads.ttl)\n\nPass a `format` option to the constructor with the name or MIME type of a format\nfor strict, fault-intolerant behavior.\n\nNote that the library does not support full [Notation3](http://www.w3.org/TeamSubmission/n3/) yet\n(and a standardized specification for this syntax is currently lacking).\n\n### Breaking changes\nN3.js 0.4.x introduces the following breaking changes from 0.3.x versions:\n- The fourth element of a quad is named `graph` instead of `context`.\n- `N3.Writer` and `N3.Store` constructor options are passed as a hash `{ prefixes: { … } }`.\n- `N3.Util` URI methods such as `isUri` are now IRI methods such as `isIRI`.\n\n## License, status and contributions\nThe N3.js library is copyrighted by [Ruben Verborgh](http://ruben.verborgh.org/)\nand released under the [MIT License](https://github.com/RubenVerborgh/N3.js/blob/master/LICENSE.md).\n\n[![Build Status](https://travis-ci.org/RubenVerborgh/N3.js.png?branch=master)](https://travis-ci.org/RubenVerborgh/N3.js)\n<br>\n[![Browser Build Status](https://ci.testling.com/RubenVerborgh/N3.js.png)](https://ci.testling.com/RubenVerborgh/N3.js)\n\nContributions are welcome, and bug reports or pull requests are always helpful.\nIf you plan to implement a larger feature, it's best to contact me first.\n",
  "readmeFilename": "README.md",
  "_id": "n3@0.4.3",
  "_from": "n3@"
}
